plugins {
	id 'net.minecraftforge.gradle' version '6.+'
	id 'idea'
	id "maven-publish"
	id "org.parchmentmc.librarian.forgegradle" version "1.+"
	id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.9"
	id('com.modrinth.minotaur') version '2.+'
	id('com.matthewprenger.cursegradle') version '1.4.0'
}

group = "thedarkcolour.gendustry"
version = gendustryVersion
base.archivesName = "gendustry-$minecraftVersion"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
	mappings channel: 'parchment', version: "$mappingsVersion-$minecraftVersion"

	runs {
		configureEach {
			workingDirectory project.file("run")

			property "forge.logging.console.level", "debug"
			property "fml.earlyprogresswindow", "false"

			// See https://github.com/Vazkii/Patchouli#mixin-troubleshooting
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "$projectDir/build/createSrgToMcp/output.srg"

			// Requires JetBrains JDK or DCEVM
			jvmArgs.add('-XX:+AllowEnhancedClassRedefinition')

			mods {
				forestry {
					source sourceSets.main
				}
			}
		}

		client {}

		server {
			workingDirectory project.file("run/server")
		}

		data {
			args "--mod", "gendustry", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")
		}
	}
}

repositories {
	maven {
		name = 'jei'
		url = 'https://maven.blamejared.com/'
		content { includeGroup "mezz.jei" }
	}
	maven {
		name = "Patchouli"
		url = "https://maven.blamejared.com/"
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = 'ModKit'
		url 'https://jitpack.io'
		content { includeGroup 'com.github.thedarkcolour' }
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:$minecraftVersion-$forgeVersion"

	// JEI OPTIONAL
	compileOnly fg.deobf("mezz.jei:jei-$minecraftVersion-common-api:$jeiVersion")
	compileOnly fg.deobf("mezz.jei:jei-$minecraftVersion-forge-api:$jeiVersion")
	runtimeOnly fg.deobf("mezz.jei:jei-$minecraftVersion-forge:$jeiVersion")
	// PATCHOULI REQUIRED
	compileOnly fg.deobf("vazkii.patchouli:Patchouli:$patchouliVersion-FORGE:api")
	runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:$patchouliVersion-FORGE")
	// ModKit DEV ONLY
	implementation fg.deobf('com.github.thedarkcolour:ModKit:58dcc30770')

	implementation fg.deobf("maven.modrinth:forestry-community-edition:$forestryVersion")

	implementation fg.deobf("maven.modrinth:cofh-core:11.0.2")
	implementation fg.deobf("maven.modrinth:thermal-foundation:11.0.6")
	implementation fg.deobf("maven.modrinth:thermal-dynamics:11.0.1")
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
	var replaceProperties = [
			"version"              : project.version,
			"forgeVersionRange"    : forgeVersionRange,
			"jeiVersionRange"      : jeiVersionRange,
			"patchouliVersionRange": patchouliVersionRange,
			"fmlVersionRange"      : fmlVersionRange,
			"forestryVersionRange" : forestryVersionRange,
	]
	inputs.properties replaceProperties
	expand replaceProperties

	from "src/main/templates"
	into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata

idea.project.settings {
	taskTriggers {
		afterSync generateModMetadata
	}
}

jar {
	finalizedBy "reobfJar"
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}

if (System.getenv("CURSEFORGE_TOKEN")) {
	curseforge {
		apiKey = System.getenv("CURSEFORGE_TOKEN")

		project {
			id = project.curseforgeId
			changelogType = "markdown"
			changelog = getChangelog(version)

			releaseType = "release"

			addGameVersion(project.minecraftVersion)
			addGameVersion("Forge")
			addGameVersion("Java 17")

			mainArtifact(jar.archiveFile) {
				displayName = "Gendustry: Community Edition ${project.version}"
				relations {
					requiredDependency 'forestry-community-edition'
				}
			}
		}
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = project.modrinthId
	versionName = "Gendustry: Community Edition $version"
	versionNumber = version.toString()
	versionType = "release"
	gameVersions = [minecraftVersion]
	loaders = ["forge"]
	changelog = getChangelog(project.version)

	uploadFile = jar

	dependencies {
		required.project("forestry-community-edition")
	}
}

static def getChangelog(Object version) {
	version = version.toString()

	def file = new File('changelog.md')
	if (!file.exists()) {
		return "Changelog file not found"
	}

	// Relies on the changelog block being "##blahblahblah_VERSION" where _ is a space
	def content = file.text.normalize().split("##.* ")

	for (final def chunk in content) {
		if (chunk.isEmpty()) continue

		def lineTerminatorIndex = chunk.findIndexOf { c -> c == '\n' || c == '\r' }
		def versionString = chunk.substring(0, lineTerminatorIndex)

		if (versionString == version) {
			return "## Gendustry $version\n" + chunk.substring(lineTerminatorIndex + 1)
		}
	}

	// Fallback in case this fails
	return "Gendustry Update ${version}"
}